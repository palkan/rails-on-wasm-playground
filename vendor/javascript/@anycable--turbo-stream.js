import{Channel as e}from"@anycable/core";import{connectStreamSource as t,disconnectStreamSource as s}from"@hotwired/turbo";class TurboChannel extends e{static identifier="__turbo__";constructor(e,t,s){super(s);this.element=e;this.channelId=t}set channelId(e){this._channelId=e}get channelId(){return this._channelId}}function walk(e){return e&&typeof e==="object"?e instanceof Date||e instanceof RegExp?e:Array.isArray(e)?e.map(walk):Object.keys(e).reduce(((t,s)=>{let n=s[0].toLowerCase()+s.slice(1).replace(/([A-Z]+)/g,((e,t)=>"_"+t.toLowerCase()));t[n]=walk(e[s]);return t}),{}):e}function isPreview(){return document.documentElement.hasAttribute("data-turbo-preview")}class TurboStreamSourceElement extends HTMLElement{static cable;static channelClass;static delayedUnsubscribe;async connectedCallback(){t(this);if(isPreview())return;let e=this.constructor.cable;let s=this.constructor.channelClass;let n=this.getAttribute("channel");let a=this.getAttribute("signed-stream-name");let i=walk({...this.dataset});this.listeners=[];this.channel=new s(this,n,{signed_stream_name:a,...i});this.listeners.push(this.channel.on("connect",(()=>this.setAttribute("connected",""))));this.listeners.push(this.channel.on("disconnect",(()=>this.removeAttribute("connected"))));this.listeners.push(this.channel.on("message",this.dispatchMessageEvent.bind(this)));e.subscribe(this.channel)}disconnectedCallback(){s(this);if(this.channel){for(let e of this.listeners)e();this.listeners.length=0;let e=this.channel;let t=this.constructor.delayedUnsubscribe;t?setTimeout((()=>e.disconnect()),t):e.disconnect()}}dispatchMessageEvent(e){let t=new MessageEvent("message",{data:e});return this.dispatchEvent(t)}}const n="X-Socket-ID";function start(e,t={}){let s=t.tagName||"turbo-cable-stream-source";let a=t.channelClass||TurboChannel;let i=t.delayedUnsubscribe||0;i===true&&(i=300);let c=class extends TurboStreamSourceElement{};c.cable=e;c.channelClass=a;c.delayedUnsubscribe=i;customElements.get(s)===void 0&&customElements.define(s,c);if(t.requestSocketIDHeader){let s=t.requestSocketIDHeader===true?n:t.requestSocketIDHeader;document.addEventListener("turbo:before-fetch-request",(t=>{e.sessionId&&!t.detail.fetchOptions.headers[s]&&(t.detail.fetchOptions.headers[s]=e.sessionId)}))}}export{n as DEFAULT_SOCKET_HEADER,TurboChannel,start};

